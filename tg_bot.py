from telebot.async_telebot import AsyncTeleBot
from telebot.asyncio_filters import AdvancedCustomFilter
from telebot.util import quick_markup
from telebot.types import CallbackQuery, Message, InlineKeyboardMarkup
from telebot.callback_data import CallbackData, CallbackDataFilter
from telebot.asyncio_handler_backends import State, StatesGroup
from telebot.asyncio_storage import StateMemoryStorage
from database import DataBase
from WB_feedbacks import WBParser
from yandex_AI import YandexAI
from envparse import Env
from answer_message import Answer
from keyboard import main_menu, start_menu, top_menu, tariffs
from pprint import pprint
import asyncio

env = Env()
env.read_envfile()

BOT_TOKEN = env("BOT_TOKEN", default="Not found")
clb_edit = CallbackData('mid', prefix='edit')
clb_regenerate = CallbackData('mid', prefix='regenerate')
clb_publish = CallbackData('mid', prefix='publish')
clb_not_answer = CallbackData('mid', prefix='not_answer')
clb_add_signature = CallbackData('mid', prefix='add_signature')


bot = AsyncTeleBot(BOT_TOKEN)
db = DataBase()
user_parser = None
ya_ai = YandexAI(env("YANDEX_TOKEN"))
answer_list = []
my_state = {}
state = None
edit_msg = {"edit": None}
my_signature = ''


async def create_markup(message_id: int) -> InlineKeyboardMarkup:
    feedback_kb = quick_markup(
        {
            "üì§–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å": {"callback_data": clb_publish.new(mid=message_id)},
            "üìù–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å": {"callback_data": clb_edit.new(mid=message_id)},
            "üîÅ–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç": {"callback_data": clb_regenerate.new(mid=message_id)},
            "‚õîÔ∏è–ù–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –æ—Ç–∑—ã–≤": {"callback_data": clb_not_answer.new(mid=message_id)},
            "‚úèÔ∏è–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å": {"callback_data": clb_add_signature.new(mid=message_id)}
        }
    )
    return feedback_kb


@bot.message_handler(commands=["start"])
async def start_handler(message):
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç, —è {{–ò–ú–Ø}} - –∏—Å—Å–∫—É—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–µ–∫—Ç,"
        "–ø–æ–º–æ–≥–∞—é –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –æ—Ç–∑—ã–≤—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π. –ï—Å–ª–∏ —Ç—ã "
        "–Ω–∞—á–∏–Ω–∞—é—â–∏–π –ø—Ä–æ–¥–∞–≤–µ—Ü, —Ç–æ –¥–ª—è —Ç–µ–±—è –∏—Å—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ "
        "—Å–µ—Ä–≤–∏—Å–∞ –±—É–¥–µ—Ç —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ."
        "\n \n"
        "–í—Å–µ —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å - —ç—Ç–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ä—Ç "
        "–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–±–∏–Ω–µ—Ç, –≤–ø–µ—Ä–µ–¥!"
    )
    await bot.send_message(message.chat.id, welcome_text, reply_markup=main_menu)


@bot.message_handler(commands=["feedbacks"])
async def my_feedbacks(message):
    await bot.delete_message(message.chat.id, message.message_id)
    feedbacks_count = await db.get_count_query(message.from_user.id)
    await bot.send_message(
        message.chat.id, f"–£ –í–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {feedbacks_count} –æ—Ç–∑—ã–≤–æ–≤."
    )


@bot.message_handler(commands=["add_token"])
async def add_token(message):
    global state
    add_instruction = (
        "*1.* –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç Wildberries (–¥–∞–Ω–Ω–æ–µ "
        "–¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü—É –∫–∞–±–∏–Ω–µ—Ç–∞) "
        "[–ü—Ä–æ—Ñ–∏–ª—å -> –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –î–æ—Å—Ç—É–ø –∫ API](https://seller.wildberries.ru/about-portal/ru/)\n"
        "*2.* –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ç–æ–∫–µ–Ω–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä WBBotToken\n"
        "*3.* –í—ã–±–µ—Ä–∏—Ç–µ '–ö–æ–Ω—Ç–µ–Ω—Ç' –∏ '–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–∑—ã–≤—ã'\n"
        "*4.* –ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω'\n"
        "*–°–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω!!!*"
    )
    state = 'token'
    await bot.delete_message(message.chat.id, message.id)
    await bot.send_message(message.chat.id, text=add_instruction, parse_mode="Markdown")


@bot.message_handler(commands=["get_feedbacks"])
async def get_feedbacks(message):
    await bot.delete_message(message.chat.id, message.message_id)
    user_data = await db.get_user_data(message.from_user.id)
    wb_token = user_data[3]
    feedbacks_count = user_data[4]
    global user_parser
    user_parser = WBParser(wb_token)
    feedbacks = await user_parser.get_feedback()
    unanswered_count = len(feedbacks.get("data").get("feedbacks"))
    if feedbacks_count == 0:
        await bot.send_message(
            message.chat.id,
            f"–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É, "
            f"–±–∞–ª–∞–Ω—Å –≤–∞—à–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ —Ä–∞–≤–µ–Ω: {feedbacks_count}",
        )
    else:
        if unanswered_count > feedbacks_count:
            await bot.send_message(
                message.chat.id,
                "–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Ç–∑—ã–≤–æ–≤ —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å "
                "–Ω–∞ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É. "
                "–î–ª—è —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /tariffs",
            )
            unanswered_count = feedbacks_count
        if unanswered_count == 0:
            await bot.send_message(
                message.chat.id,
                "–£ –í–∞—Å –Ω–µ—Ç –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤.",
            )
        i = 0
        while i != unanswered_count:
            text_feedback = feedbacks.get("data").get(
                "feedbacks")[i].get("text")
            company = (
                feedbacks.get("data")
                .get("feedbacks")[i]
                .get("productDetails")
                .get("brandName")
            )
            created_date = (
                feedbacks.get("data").get("feedbacks")[
                    i].get("createdDate")
            )
            product_name = (
                feedbacks.get("data")
                .get("feedbacks")[i]
                .get("productDetails")
                .get("productName")
            )
            get_product_valuation = (
                feedbacks.get("data").get("feedbacks")[
                    i].get("productValuation")
            )
            feedback_id = feedbacks.get("data").get(
                "feedbacks")[i].get("id")
            user_name = feedbacks.get("data").get("feedbacks")[i].get("userName")
            if text_feedback == "":
                # await bot.send_message(
                #     message.chat.id, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ø—É—Å—Ç–æ–π –æ—Ç–∑—ã–≤."
                # )
                i += 1
                continue
            ai_feedback = await ya_ai.create_feetbacks(text_feedback, company, user_name)
            set_product_valuation = ""
            for index in range(1, 6, 1):
                if index <= int(get_product_valuation):
                    set_product_valuation += "‚≠êÔ∏è"
                else:
                    set_product_valuation += "‚ô¶Ô∏è"
            ai_answer = (
                ai_feedback.get("result")
                .get("alternatives")[0]
                .get("message")
                .get("text")
            )
            next_message_id = (message.message_id + i + 1)
            answer_message = Answer(
                company,
                product_name,
                set_product_valuation,
                created_date[:10],
                text_feedback,
                ai_answer,
                int(next_message_id),
                feedback_id,
                user_name
            )
            my_state[next_message_id] = answer_message
            send_message = await answer_message.create_message_not_signature()
            markup = await create_markup(next_message_id)
            await bot.send_message(
                message.chat.id,
                send_message,
                reply_markup=markup,
                parse_mode="Markdown",
            )
            i += 1


@bot.message_handler(commands=["tariffs"])
async def get_tariffs(message):
    await bot.delete_message(message.chat.id, message.message_id)
    markup = quick_markup(
        {
            "100": {"callback_data": "pay_100"},
            "500": {"callback_data": "pay_500"},
            "1000": {"callback_data": "pay_1000"},
            "2000": {"callback_data": "pay_2000"},
            "10000": {"callback_data": "pay_10000"},
        },
        row_width=2,
    )
    answer_message = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:\n\n"
        "–°—Ç–∞—Ä—Ç–æ–≤—ã–π - 100 –æ—Ç–≤–µ—Ç–æ–≤. –¶–µ–Ω–∞ 392 —Ä—É–±. –¶–µ–Ω–∞ –∑–∞ 1 –æ—Ç–∑—ã–≤ 3.92 —Ä—É–±.\n"
        "–ë–∞–∑–æ–≤—ã–π - 500 –æ—Ç–≤–µ—Ç–æ–≤. –¶–µ–Ω–∞ 1592 —Ä—É–±. –¶–µ–Ω–∞ –∑–∞ 1 –æ—Ç–∑—ã–≤ 3.18 —Ä—É–±.\n"
        "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π - 1000 –æ—Ç–≤–µ—Ç–æ–≤. –¶–µ–Ω–∞ 2872 —Ä—É–±. –¶–µ–Ω–∞ –∑–∞ 1 –æ—Ç–∑—ã–≤ 2.87 —Ä—É–±.\n"
        "–ü—Ä–µ–º–∏—É–º - 2000 –æ—Ç–≤–µ—Ç–æ–≤. –¶–µ–Ω–∞ 5592 —Ä—É–±. –¶–µ–Ω–∞ –∑–∞ 1 –æ—Ç–∑—ã–≤ 2.79 —Ä—É–±.\n"
        "–¢–û–ü - 10000 –æ—Ç–≤–µ—Ç–æ–≤. –¶–µ–Ω–∞ 23992 —Ä—É–±. –¶–µ–Ω–∞ –∑–∞ 1 –æ—Ç–∑—ã–≤ 2.39 —Ä—É–±.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ."
    )
    await bot.send_message(message.chat.id, answer_message, reply_markup=markup)



@bot.message_handler()
async def test_message(message):
    global state
    global my_signature
    if state == "token":
        try:
            await db.set_token_query(uid=message.from_user.id, token=message.text)
            await bot.send_message(message.chat.id, "–¢–æ–∫–µ–Ω –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=top_menu)
            await bot.delete_state(message.from_user.id)
        except Exception as E:
            await bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
    elif state == "edit":
        await bot.delete_message(message.chat.id, message.message_id - 1)
        await bot.delete_message(message.chat.id, message.message_id)
        msg = edit_msg.pop("edit", None)
        await bot.delete_message(message.chat.id, msg.message_id)
        msg.ai_answer = message.text
        msg.message_id = message.message_id + 1
        my_state[message.message_id + 1] = msg
        new_msg = await msg.create_message_not_signature()
        markup = await create_markup(msg.message_id)
        await bot.send_message(
            message.chat.id, new_msg, parse_mode="Markdown", reply_markup=markup
        )
        await bot.delete_state(message.from_user.id)
    elif state == "signature":
        my_signature = message.text
        await bot.send_message(
            message.chat.id, '–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –ø–æ–¥–ø–∏—Å—å!', reply_markup=top_menu
        )


@bot.callback_query_handler(func=lambda callback: callback.data == 'signature_answer')
async def callback_edit(callback: CallbackQuery) -> None:
    global state
    state = 'signature'
    await bot.send_message(
        callback.message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –í–∞—à—É –ø–æ–¥–ø–∏—Å—å –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏"
    )
    await bot.answer_callback_query(callback.id)


@bot.callback_query_handler(func=lambda callback: callback.data == 'get_feedbacks')
async def callback_edit(callback: CallbackQuery) -> None:
    user_data = await db.get_user_data(callback.from_user.id)
    wb_token = user_data[3]
    feedbacks_count = user_data[4]
    global user_parser
    user_parser = WBParser(wb_token)
    feedbacks = await user_parser.get_feedback()
    if feedbacks.get('code') == 401:
        await bot.send_message(
            callback.message.chat.id,
            "–í–∞—à —Ç–æ–∫–µ–Ω –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω!",
            reply_markup=start_menu
        )
    unanswered_count = len(feedbacks.get("data").get("feedbacks"))
    if feedbacks_count == 0:
        await bot.send_message(
            callback.message.chat.id,
            f"–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É, "
            f"–±–∞–ª–∞–Ω—Å –≤–∞—à–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ —Ä–∞–≤–µ–Ω: {feedbacks_count}",
        )
    else:
        if unanswered_count > feedbacks_count:
            await bot.send_message(
                callback.message.chat.id,
                "–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Ç–∑—ã–≤–æ–≤ —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å "
                "–Ω–∞ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É. "
                "–î–ª—è —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /tariffs",
            )
            unanswered_count = feedbacks_count
        if unanswered_count == 0:
            await bot.send_message(
                callback.message.chat.id,
                "–£ –í–∞—Å –Ω–µ—Ç –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤.",
            )
        i = 0
        while i != unanswered_count:
            text_feedback = feedbacks.get("data").get(
                "feedbacks")[i].get("text")
            company = (
                feedbacks.get("data")
                .get("feedbacks")[i]
                .get("productDetails")
                .get("brandName")
            )
            created_date = (
                feedbacks.get("data").get("feedbacks")[
                    i].get("createdDate")
            )
            product_name = (
                feedbacks.get("data")
                .get("feedbacks")[i]
                .get("productDetails")
                .get("productName")
            )
            get_product_valuation = (
                feedbacks.get("data").get("feedbacks")[
                    i].get("productValuation")
            )
            feedback_id = feedbacks.get("data").get(
                "feedbacks")[i].get("id")
            user_name = feedbacks.get("data").get("feedbacks")[i].get("userName")
            if text_feedback == "":
                # await bot.send_message(
                #     callback.message.chat.id, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ø—É—Å—Ç–æ–π –æ—Ç–∑—ã–≤."
                # )
                i += 1
                continue
            ai_feedback = await ya_ai.create_feetbacks(text_feedback, company, user_name)
            set_product_valuation = ""
            for index in range(1, 6, 1):
                if index <= int(get_product_valuation):
                    set_product_valuation += "‚≠êÔ∏è"
                else:
                    set_product_valuation += "‚ô¶Ô∏è"
            ai_answer = (
                ai_feedback.get("result")
                .get("alternatives")[0]
                .get("message")
                .get("text")
            )
            next_message_id = (callback.message.message_id + i + 1)
            answer_message = Answer(
                company,
                product_name,
                set_product_valuation,
                created_date[:10],
                text_feedback,
                ai_answer,
                int(next_message_id),
                feedback_id,
                user_name
            )
            my_state[next_message_id] = answer_message
            send_message = await answer_message.create_message_not_signature()
            markup = await create_markup(next_message_id)
            await bot.send_message(
                callback.message.chat.id,
                send_message,
                reply_markup=markup,
                parse_mode="Markdown",
            )
            i += 1
    await bot.answer_callback_query(callback.id)


@bot.callback_query_handler(func=lambda callback: callback.data == 'add_token')
async def callback_edit(callback: CallbackQuery) -> None:
    global state
    add_instruction = (
        "*1.* –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç Wildberries (–¥–∞–Ω–Ω–æ–µ "
        "–¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü—É –∫–∞–±–∏–Ω–µ—Ç–∞) "
        "[–ü—Ä–æ—Ñ–∏–ª—å -> –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –î–æ—Å—Ç—É–ø –∫ API](https://seller.wildberries.ru/about-portal/ru/)\n"
        "*2.* –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ç–æ–∫–µ–Ω–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä WBBotToken\n"
        "*3.* –í—ã–±–µ—Ä–∏—Ç–µ '–ö–æ–Ω—Ç–µ–Ω—Ç' –∏ '–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–∑—ã–≤—ã'\n"
        "*4.* –ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω'\n"
        "*–°–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω!!!*"
    )
    state = 'token'
    await bot.send_message(callback.message.chat.id, text=add_instruction, parse_mode="Markdown")
    await bot.answer_callback_query(callback.id)

@bot.callback_query_handler(func=lambda callback: clb_edit.filter().check(callback))
async def callback_edit(callback: CallbackQuery):
    global state
    cl_data = clb_edit.parse(callback_data=callback.data)
    mid = cl_data.get('mid')
    state = "edit"
    # await bot.set_state(callback.from_user.id, "edit", callback.message.chat.id)
    edit_msg["edit"] = my_state.pop(int(mid), None)
    await bot.send_message(
        callback.message.chat.id,
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–∑—ã–≤ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.",
    )
    await bot.answer_callback_query(callback.id)


@bot.callback_query_handler(func=lambda callback: clb_regenerate.filter().check(callback))
async def callback_regenerate(callback: CallbackQuery):
    cl_data = clb_regenerate.parse(callback_data=callback.data)
    mid = cl_data.get('mid')
    fedback_msg = my_state.pop(int(mid), None)
    await bot.delete_message(callback.message.chat.id, callback.message.message_id)
    ai_feedback = await ya_ai.create_feetbacks(
        fedback_msg.text_feedback, fedback_msg.company, fedback_msg.user_name
    )
    ai_answer = (
        ai_feedback.get("result").get("alternatives")[
            0].get("message").get("text")
    )
    fedback_msg.ai_answer = ai_answer
    fedback_msg.message_id = callback.message.message_id + 1
    my_state[callback.message.message_id + 1] = fedback_msg
    send_msg = await fedback_msg.create_message_not_signature()
    markup = await create_markup(callback.message.message_id+1)
    await bot.send_message(
        callback.message.chat.id,
        send_msg,
        reply_markup=markup,
        parse_mode="Markdown",
    )
    await bot.answer_callback_query(callback.id)


@bot.callback_query_handler(func=lambda callback: clb_not_answer.filter().check(callback))
async def callback_not_answer(callback: CallbackQuery):
    cl_data = clb_not_answer.parse(callback_data=callback.data)
    mid = cl_data.get('mid')
    del my_state[int(mid)]
    await bot.delete_message(callback.message.chat.id, int(mid))
    await bot.answer_callback_query(int(callback.id))


@bot.callback_query_handler(func=lambda callback: clb_add_signature.filter().check(callback))
async def callback_add_signature(callback: CallbackQuery):
    global my_signature
    cl_data = clb_add_signature.parse(callback_data=callback.data)
    mid = cl_data.get('mid')
    fedback_msg = my_state.pop(int(mid), None)
    ai_answer = f"{fedback_msg.ai_answer} {my_signature}"
    fedback_msg.ai_answer = ai_answer
    fedback_msg.message_id = callback.message.message_id + 1
    my_state[callback.message.message_id + 1] = fedback_msg
    send_msg = await fedback_msg.create_message_with_signature()
    markup = await create_markup(callback.message.message_id+1)
    await bot.send_message(
        callback.message.chat.id,
        send_msg,
        reply_markup=markup,
        parse_mode="Markdown",
    )
    await bot.delete_message(callback.message.chat.id, int(fedback_msg.message_id))
    await bot.answer_callback_query(callback.id)

@bot.callback_query_handler(func=lambda callback: clb_publish.filter().check(callback))
async def callback_pulish(callback: CallbackQuery):
    global user_parser
    uid = int(callback.from_user.id)
    cl_data = clb_add_signature.parse(callback_data=callback.data)
    mid = cl_data.get('mid')
    fedback_msg = my_state.pop(int(mid), None)
    await user_parser.feedback_answer(
        fedback_msg.feedback_id, fedback_msg.ai_answer
    )
    await db.minus_count_query(uid)
    await bot.delete_message(callback.message.chat.id, int(mid))
    await bot.answer_callback_query(int(callback.id))


@bot.callback_query_handler(func=lambda callback: callback.data == "bot_start")
async def bot_start(callback: CallbackQuery) -> None:
    await bot.send_message(callback.message.chat.id, callback.message.text, reply_markup=start_menu)
    await bot.answer_callback_query(callback.id)


@bot.callback_query_handler(func=lambda callback: callback.data == "tariffs")
async def bot_start(callback: CallbackQuery) -> None:
    answer_message = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:\n\n"
        "–°—Ç–∞—Ä—Ç–æ–≤—ã–π - 100 –æ—Ç–≤–µ—Ç–æ–≤. –¶–µ–Ω–∞ 392 —Ä—É–±. –¶–µ–Ω–∞ –∑–∞ 1 –æ—Ç–∑—ã–≤ 3.92 —Ä—É–±.\n"
        "–ë–∞–∑–æ–≤—ã–π - 500 –æ—Ç–≤–µ—Ç–æ–≤. –¶–µ–Ω–∞ 1592 —Ä—É–±. –¶–µ–Ω–∞ –∑–∞ 1 –æ—Ç–∑—ã–≤ 3.18 —Ä—É–±.\n"
        "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π - 1000 –æ—Ç–≤–µ—Ç–æ–≤. –¶–µ–Ω–∞ 2872 —Ä—É–±. –¶–µ–Ω–∞ –∑–∞ 1 –æ—Ç–∑—ã–≤ 2.87 —Ä—É–±.\n"
        "–ü—Ä–µ–º–∏—É–º - 2000 –æ—Ç–≤–µ—Ç–æ–≤. –¶–µ–Ω–∞ 5592 —Ä—É–±. –¶–µ–Ω–∞ –∑–∞ 1 –æ—Ç–∑—ã–≤ 2.79 —Ä—É–±.\n"
        "–¢–û–ü - 10000 –æ—Ç–≤–µ—Ç–æ–≤. –¶–µ–Ω–∞ 23992 —Ä—É–±. –¶–µ–Ω–∞ –∑–∞ 1 –æ—Ç–∑—ã–≤ 2.39 —Ä—É–±.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ."
    )
    await bot.send_message(callback.message.chat.id, answer_message, reply_markup=tariffs)
    await bot.answer_callback_query(callback.id)


@bot.callback_query_handler(func=lambda callback: callback.data == "balance")
async def bot_start(callback: CallbackQuery) -> None:
    feedbacks_count = await db.get_count_query(callback.message.from_user.id)
    await bot.send_message(
        callback.message.chat.id, f"–£ –í–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {feedbacks_count} –æ—Ç–∑—ã–≤–æ–≤.", reply_markup=top_menu
    )
    await bot.answer_callback_query(callback.id)


@bot.callback_query_handler(func=lambda callback: True)
async def callbacks(callback: CallbackQuery) -> None:
    uid = int(callback.from_user.id)
    if callback.data == "main_menu":
        add_user = await db.add_user_query(uid)
        if add_user:
            answer_message = (
                f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º {callback.from_user.first_name}, –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ 60 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤!"
            )
            await bot.send_message(callback.message.chat.id, answer_message)
        else:
            count_query = await db.get_count_query(uid)
            answer_message = (
                f"{callback.from_user.first_name} –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω —Ä–∞–Ω–Ω–µ–µ, "
                f"—É –í–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {count_query} –æ—Ç–≤–µ—Ç–æ–≤."
            )
            await bot.send_message(callback.message.chat.id, answer_message, reply_markup=top_menu)
    elif callback.data == "pay_100":
        await db.add_count_query(uid, 100)
        await db.payed_query_true(uid)
        await bot.send_message(
            callback.message.chat.id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í—ã –æ–ø–ª–∞—Ç–∏–ª–∏ 100 –æ—Ç–∑—ã–≤–æ–≤."
        )
    elif callback.data == "pay_500":
        await db.add_count_query(uid, 500)
        await db.payed_query_true(uid)
        await bot.send_message(
            callback.message.chat.id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í—ã –æ–ø–ª–∞—Ç–∏–ª–∏ 500 –æ—Ç–∑—ã–≤–æ–≤."
        )
    elif callback.data == "pay_1000":
        await db.add_count_query(uid, 1000)
        await db.payed_query_true(uid)
        await bot.send_message(
            callback.message.chat.id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í—ã –æ–ø–ª–∞—Ç–∏–ª–∏ 1000 –æ—Ç–∑—ã–≤–æ–≤."
        )
    elif callback.data == "pay_2000":
        await db.add_count_query(uid, 2000)
        await db.payed_query_true(uid)
        await bot.send_message(
            callback.message.chat.id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í—ã –æ–ø–ª–∞—Ç–∏–ª–∏ 2000 –æ—Ç–∑—ã–≤–æ–≤."
        )
    elif callback.data == "pay_10000":
        await db.add_count_query(uid, 10000)
        await db.payed_query_true(uid)
        await bot.send_message(
            callback.message.chat.id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í—ã –æ–ø–ª–∞—Ç–∏–ª–∏ 10000 –æ—Ç–∑—ã–≤–æ–≤."
        )
    await bot.answer_callback_query(callback.id)


if __name__ == "__main__":
    asyncio.run(bot.polling(non_stop=True))
