from telebot.async_telebot import AsyncTeleBot
from telebot import util
from database import DataBase
from WB_feedbacks import WBParser
from yandex_AI import YandexAI
from envparse import Env
from answer_message import Answer
from pprint import pprint
import asyncio

env = Env()
env.read_envfile()


BOT_TOKEN = env("BOT_TOKEN", default="Not found")


bot = AsyncTeleBot(BOT_TOKEN)
db = DataBase()
user_parser = None
ya_ai = YandexAI(env("YANDEX_TOKEN"))
answer_list = []
my_state = {}
edit_msg = {"edit": None}


@bot.message_handler(commands=["start"])
async def start_handler(message):
    markup = util.quick_markup({"–°—Ç–∞—Ä—Ç": {"callback_data": "get_feedback"}})
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç, —è {{–ò–ú–Ø}} - –∏—Å—Å–∫—É—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–µ–∫—Ç,"
        "–ø–æ–º–æ–≥–∞—é –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –æ—Ç–∑—ã–≤—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π. –ï—Å–ª–∏ —Ç—ã "
        "–Ω–∞—á–∏–Ω–∞—é—â–∏–π –ø—Ä–æ–¥–∞–≤–µ—Ü, —Ç–æ –¥–ª—è —Ç–µ–±—è –∏—Å—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ "
        "—Å–µ—Ä–≤–∏—Å–∞ –±—É–¥–µ—Ç —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ."
        "\n \n"
        "–í—Å–µ —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å - —ç—Ç–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ä—Ç "
        "–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–±–∏–Ω–µ—Ç, –≤–ø–µ—Ä–µ–¥!"
    )
    await bot.send_message(message.chat.id, welcome_text, reply_markup=markup)


@bot.message_handler(commands=["feedbacks"])
async def my_feedbacks(message):
    await bot.delete_message(message.chat.id, message.message_id)
    feedbacks_count = await db.get_count_query(message.from_user.id)
    await bot.send_message(
        message.chat.id, f"–£ –í–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {feedbacks_count} –æ—Ç–∑—ã–≤–æ–≤."
    )


@bot.message_handler(commands=["add_token"])
async def add_token(message):
    add_instruction = (
        "*1.* –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç Wildberries (–¥–∞–Ω–Ω–æ–µ "
        "–¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü—É –∫–∞–±–∏–Ω–µ—Ç–∞) "
        "[–ü—Ä–æ—Ñ–∏–ª—å -> –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –î–æ—Å—Ç—É–ø –∫ API](https://seller.wildberries.ru/about-portal/ru/)\n"
        "*2.* –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ç–æ–∫–µ–Ω–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä WBBotToken\n"
        "*3.* –í—ã–±–µ—Ä–∏—Ç–µ '–ö–æ–Ω—Ç–µ–Ω—Ç' –∏ '–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–∑—ã–≤—ã'\n"
        "*4.* –ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω'\n"
        "*–°–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω!!!*"
    )
    await bot.delete_message(message.chat.id, message.id)
    await bot.set_state(message.from_user.id, "token", message.chat.id)
    await bot.send_message(message.chat.id, text=add_instruction, parse_mode="Markdown")


@bot.message_handler(commands=["get_feedbacks"])
async def get_feedbacks(message):
    await bot.delete_message(message.chat.id, message.message_id)
    user_data = await db.get_user_data(message.from_user.id)
    wb_token = user_data[3]
    # is_payed = True if user_data[2] == 1 else False
    feedbacks_count = user_data[4]
    global user_parser
    user_parser = WBParser(wb_token)
    markup = util.quick_markup(
        {
            "üì§–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å": {"callback_data": "publish"},
            "üìù–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å": {"callback_data": "edit"},
            "üîÅ–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç": {"callback_data": "regenerate"},
            "‚õîÔ∏è–ù–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –æ—Ç–∑—ã–≤": {"callback_data": "not_answer"},
        },
        row_width=2,
    )
    feedbacks = await user_parser.get_feedback()
    unanswered_count = len(feedbacks.get("data").get("feedbacks"))
    if feedbacks_count == 0:
        await bot.send_message(
            message.chat.id,
            f"–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É, "
            f"–±–∞–ª–∞–Ω—Å –≤–∞—à–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ —Ä–∞–≤–µ–Ω: {feedbacks_count}",
        )
    else:
        if unanswered_count > feedbacks_count:
            await bot.send_message(
                message.chat.id,
                "–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Ç–∑—ã–≤–æ–≤ —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å "
                "–Ω–∞ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É. "
                "–î–ª—è —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /tariffs",
            )
            unanswered_count = feedbacks_count
        if unanswered_count == 0:
            await bot.send_message(
                message.chat.id,
                "–£ –í–∞—Å –Ω–µ—Ç –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤.",
            )
        i = 0
        while i != unanswered_count:
            text_feedback = feedbacks.get("data").get(
                "feedbacks")[i].get("text")
            company = (
                feedbacks.get("data")
                .get("feedbacks")[i]
                .get("productDetails")
                .get("brandName")
            )
            created_date = (
                feedbacks.get("data").get("feedbacks")[
                    i].get("createdDate")
            )
            product_name = (
                feedbacks.get("data")
                .get("feedbacks")[i]
                .get("productDetails")
                .get("productName")
            )
            get_product_valuation = (
                feedbacks.get("data").get("feedbacks")[
                    i].get("productValuation")
            )
            feedback_id = feedbacks.get("data").get(
                "feedbacks")[i].get("id")
            if text_feedback == "":
                await bot.send_message(
                    message.chat.id, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ø—É—Å—Ç–æ–π –æ—Ç–∑—ã–≤."
                )
                i += 1
                continue
            ai_feedback = await ya_ai.create_feetbacks(text_feedback, company)
            set_product_valuation = ""
            for index in range(1, 6, 1):
                if index <= int(get_product_valuation):
                    set_product_valuation += "‚≠êÔ∏è"
                else:
                    set_product_valuation += "‚ô¶Ô∏è"
            ai_answer = (
                ai_feedback.get("result")
                .get("alternatives")[0]
                .get("message")
                .get("text")
            )
            answer_message = Answer(
                company,
                product_name,
                set_product_valuation,
                created_date[:10],
                text_feedback,
                ai_answer,
                int(message.message_id) + 1,
                feedback_id,
            )
            my_state[message.message_id + i] = answer_message
            send_message = await answer_message.create_message()
            await bot.send_message(
                message.chat.id,
                send_message,
                reply_markup=markup,
                parse_mode="Markdown",
            )
            i += 1


@bot.message_handler(commands=["tariffs"])
async def get_tariffs(message):
    await bot.delete_message(message.chat.id, message.message_id)
    markup = util.quick_markup(
        {
            "100": {"callback_data": "pay_100"},
            "500": {"callback_data": "pay_500"},
            "1000": {"callback_data": "pay_1000"},
            "2000": {"callback_data": "pay_2000"},
            "10000": {"callback_data": "pay_10000"},
        },
        row_width=2,
    )
    answer_message = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:\n\n"
        "–°—Ç–∞—Ä—Ç–æ–≤—ã–π - 100 –æ—Ç–≤–µ—Ç–æ–≤. –¶–µ–Ω–∞ 392 —Ä—É–±. –¶–µ–Ω–∞ –∑–∞ 1 –æ—Ç–∑—ã–≤ 3.92 —Ä—É–±.\n"
        "–ë–∞–∑–æ–≤—ã–π - 500 –æ—Ç–≤–µ—Ç–æ–≤. –¶–µ–Ω–∞ 1592 —Ä—É–±. –¶–µ–Ω–∞ –∑–∞ 1 –æ—Ç–∑—ã–≤ 3.18 —Ä—É–±.\n"
        "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π - 1000 –æ—Ç–≤–µ—Ç–æ–≤. –¶–µ–Ω–∞ 2872 —Ä—É–±. –¶–µ–Ω–∞ –∑–∞ 1 –æ—Ç–∑—ã–≤ 2.87 —Ä—É–±.\n"
        "–ü—Ä–µ–º–∏—É–º - 2000 –æ—Ç–≤–µ—Ç–æ–≤. –¶–µ–Ω–∞ 5592 —Ä—É–±. –¶–µ–Ω–∞ –∑–∞ 1 –æ—Ç–∑—ã–≤ 2.79 —Ä—É–±.\n"
        "–¢–û–ü - 10000 –æ—Ç–≤–µ—Ç–æ–≤. –¶–µ–Ω–∞ 23992 —Ä—É–±. –¶–µ–Ω–∞ –∑–∞ 1 –æ—Ç–∑—ã–≤ 2.39 —Ä—É–±.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ."
    )
    await bot.send_message(message.chat.id, answer_message, reply_markup=markup)


@bot.message_handler()
async def test_message(message):
    state = await bot.get_state(message.from_user.id)
    markup = util.quick_markup(
        {
            "üì§–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å": {"callback_data": "publish"},
            "üìù–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å": {"callback_data": "edit"},
            "üîÅ–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç": {"callback_data": "regenerate"},
            "‚õîÔ∏è–ù–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –æ—Ç–∑—ã–≤": {"callback_data": "not_answer"},
        },
        row_width=2,
    )
    if state == "token":
        try:
            await db.set_token_query(uid=message.from_user.id, token=message.text)
            await bot.reply_to(message, "–¢–æ–∫–µ–Ω –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω.")
            await bot.delete_state(message.from_user.id)
        except Exception as E:
            await bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
    elif state == "edit":
        await bot.delete_message(message.chat.id, message.message_id - 1)
        await bot.delete_message(message.chat.id, message.message_id)
        msg = edit_msg.pop("edit", None)
        await bot.delete_message(message.chat.id, msg.message_id)
        msg.ai_answer = message.text
        msg.message_id = message.message_id + 1
        my_state[message.message_id + 1] = msg
        new_msg = await msg.create_message()
        await bot.send_message(
            message.chat.id, new_msg, parse_mode="Markdown", reply_markup=markup
        )
        await bot.delete_state(message.from_user.id)


@bot.callback_query_handler(func=lambda callback: True)
async def callbacks(callback):
    uid = int(callback.from_user.id)
    markup = util.quick_markup(
        {
            "üì§–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å": {"callback_data": "publish"},
            "üìù–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å": {"callback_data": "edit"},
            "üîÅ–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç": {"callback_data": "regenerate"},
            "‚õîÔ∏è–ù–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –æ—Ç–∑—ã–≤": {"callback_data": "not_answer"},
        },
        row_width=2,
    )
    if callback.data == "get_feedback":
        add_user = await db.add_user_query(uid)
        if add_user:
            answer_message = (
                "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ 60 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤! –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å "
                "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_token –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞"
            )
            await bot.send_message(callback.message.chat.id, answer_message)
        else:
            count_query = await db.get_count_query(callback.message.from_user.id)
            answer_message = (
                f"–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω —Ä–∞–Ω–Ω–µ–µ, —É –í–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {count_query} –æ—Ç–≤–µ—Ç–æ–≤. "
                f"–ú—ã –º–æ–∂–µ—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –æ—Ç–∑—ã–≤–æ–≤, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /tariffs –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å "
                f"–Ω–∞—à–∏–º–∏ —Ç–∞—Ä–∏—Ñ–∞–º–∏. –ï—Å–ª–∏ –≤—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ —Å–≤–æ–π –º–∞–≥–∞–∑–∏–Ω, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "
                f"/add_token –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞"
            )
            await bot.send_message(callback.message.chat.id, answer_message)
    elif callback.data == "pay_100":
        await db.add_count_query(uid, 100)
        await db.payed_query_true(uid)
        await bot.send_message(
            callback.message.chat.id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í—ã –æ–ø–ª–∞—Ç–∏–ª–∏ 100 –æ—Ç–∑—ã–≤–æ–≤."
        )
    elif callback.data == "pay_500":
        await db.add_count_query(uid, 500)
        await db.payed_query_true(uid)
        await bot.send_message(
            callback.message.chat.id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í—ã –æ–ø–ª–∞—Ç–∏–ª–∏ 500 –æ—Ç–∑—ã–≤–æ–≤."
        )
    elif callback.data == "pay_1000":
        await db.add_count_query(uid, 1000)
        await db.payed_query_true(uid)
        await bot.send_message(
            callback.message.chat.id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í—ã –æ–ø–ª–∞—Ç–∏–ª–∏ 1000 –æ—Ç–∑—ã–≤–æ–≤."
        )
    elif callback.data == "pay_2000":
        await db.add_count_query(uid, 2000)
        await db.payed_query_true(uid)
        await bot.send_message(
            callback.message.chat.id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í—ã –æ–ø–ª–∞—Ç–∏–ª–∏ 2000 –æ—Ç–∑—ã–≤–æ–≤."
        )
    elif callback.data == "pay_10000":
        await db.add_count_query(uid, 10000)
        await db.payed_query_true(uid)
        await bot.send_message(
            callback.message.chat.id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í—ã –æ–ø–ª–∞—Ç–∏–ª–∏ 10000 –æ—Ç–∑—ã–≤–æ–≤."
        )
    elif callback.data == "edit":
        await bot.set_state(callback.from_user.id, "edit", callback.message.chat.id)
        edit_msg["edit"] = my_state.pop(callback.message.message_id-1, None)
        await bot.send_message(
            callback.message.chat.id,
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–∑—ã–≤ " "–≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.",
        )
    elif callback.data == "regenerate":
        fedback_msg = my_state.pop(callback.message.message_id-1, None)
        await bot.delete_message(callback.message.chat.id, callback.message.message_id)
        ai_feedback = await ya_ai.create_feetbacks(
            fedback_msg.text_feedback, fedback_msg.company
        )
        ai_answer = (
            ai_feedback.get("result").get("alternatives")[
                0].get("message").get("text")
        )
        fedback_msg.ai_answer = ai_answer
        my_state[callback.message.message_id + 1] = fedback_msg
        send_msg = await fedback_msg.create_message()
        await bot.send_message(
            callback.message.chat.id,
            send_msg,
            reply_markup=markup,
            parse_mode="Markdown",
        )
    elif callback.data == "not_answer":
        await bot.delete_message(callback.message.chat.id, callback.message.message_id)
    elif callback.data == "publish":
        fedback_msg = my_state.pop(callback.message.message_id-1, None)
        await user_parser.feedback_answer(
            fedback_msg.feedback_id, fedback_msg.ai_answer
        )
        # await user_parser.check_feedback(fedback_msg.feedback_id)
        await db.minus_count_query(uid)
        await bot.delete_message(callback.message.chat.id, callback.message.message_id)


if __name__ == "__main__":
    asyncio.run(bot.polling(non_stop=True))
